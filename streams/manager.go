// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package streams

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// StreamManagerABI is the input ABI used to generate the binding from.
const StreamManagerABI = "[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chunkId\",\"type\":\"uint256\"}],\"name\":\"InputChunkAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"RefundAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"RefundRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"StreamApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"StreamCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"StreamEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"StreamRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"ValidatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"ValidatorRemoved\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chunkId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"wattages\",\"type\":\"uint256[]\"}],\"name\":\"addInputChunkId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"v\",\"type\":\"address\"}],\"name\":\"addValidator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"allowRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"approveStreamCreation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"createStream\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"endStream\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"v\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"profiles\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"refundAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"v\",\"type\":\"address\"}],\"name\":\"removeValidator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"profileNames\",\"type\":\"string[]\"}],\"name\":\"requestStream\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"refund\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"ended\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stream\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"revokeRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// StreamManagerBin is the compiled bytecode used for deploying new contracts.
var StreamManagerBin = "0x60806040523480156200001157600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36040518060400160405280600581526020017f302e302e33000000000000000000000000000000000000000000000000000000815250600190805190602001906200011b92919062000122565b50620001d1565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200016557805160ff191683800117855562000196565b8280016001018555821562000196579182015b828111156200019557825182559160200191906001019062000178565b5b509050620001a59190620001a9565b5090565b620001ce91905b80821115620001ca576000816000905550600101620001b0565b5090565b90565b6146f080620001e16000396000f3fe6080604052600436106200012e5760003560e01c8063551479dd11620000af578063b56b9f16116200006d578063b56b9f1614620003fa578063c36fe3d61462000428578063ecf9ac74146200046c578063f2fde38b146200049a578063facd743b14620004c8576200012e565b8063551479dd1462000301578063715018a6146200033757806381d12c5814620003515780638da5cb5b146200039a5780638f32d59b14620003ca576200012e565b806340a141ff11620000fd57806340a141ff14620002195780634b51438c14620002475780634d238c8e146200027557806350d55afc14620002a357806354fd4d5014620002d1576200012e565b80630d8e6e2c14620001335780630f5147171462000163578063225f654114620001a75780632c29980c14620001d5575b600080fd5b3480156200014057600080fd5b506200014b6200050c565b6040516200015a919062001fc7565b60405180910390f35b3480156200017057600080fd5b506200018f600480360362000189919081019062001be9565b620005b2565b6040516200019e919062001f19565b60405180910390f35b348015620001b457600080fd5b50620001d36004803603620001cd919081019062001be9565b620005df565b005b348015620001e257600080fd5b50620002016004803603620001fb919081019062001c15565b620006f9565b60405162000210919062001feb565b60405180910390f35b3480156200022657600080fd5b506200024560048036036200023f919081019062001bbd565b62000a5f565b005b3480156200025457600080fd5b506200027360048036036200026d919081019062001be9565b62000acf565b005b3480156200028257600080fd5b50620002a160048036036200029b919081019062001bbd565b62000be9565b005b348015620002b057600080fd5b50620002cf6004803603620002c9919081019062001be9565b62000c59565b005b348015620002de57600080fd5b50620002e962000ded565b604051620002f8919062001fa3565b60405180910390f35b6200031f600480360362000319919081019062001be9565b62000e8f565b6040516200032e919062001efc565b60405180910390f35b3480156200034457600080fd5b506200034f620010fe565b005b3480156200035e57600080fd5b506200037d600480360362000377919081019062001be9565b620011d1565b604051620003919695949392919062001f36565b60405180910390f35b348015620003a757600080fd5b50620003b262001274565b604051620003c1919062001efc565b60405180910390f35b348015620003d757600080fd5b50620003e26200129d565b604051620003f1919062001f19565b60405180910390f35b3480156200040757600080fd5b5062000426600480360362000420919081019062001c6f565b620012f4565b005b3480156200043557600080fd5b506200045460048036036200044e919081019062001be9565b62001462565b60405162000463919062001fa3565b60405180910390f35b3480156200047957600080fd5b5062000498600480360362000492919081019062001be9565b62001516565b005b348015620004a757600080fd5b50620004c66004803603620004c0919081019062001bbd565b620015ee565b005b348015620004d557600080fd5b50620004f46004803603620004ee919081019062001bbd565b62001610565b60405162000503919062001f19565b60405180910390f35b606060018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015620005a85780601f106200057c57610100808354040283529160200191620005a8565b820191906000526020600020905b8154815290600101906020018083116200058a57829003601f168201915b5050505050905090565b60006003600083815260200190815260200160002060000160019054906101000a900460ff169050919050565b620005e96200129d565b620005f357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060000160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156200066457600080fd5b600115156003600083815260200190815260200160002060000160019054906101000a900460ff16151514156200069a57600080fd5b60016003600083815260200190815260200160002060000160016101000a81548160ff021916908315150217905550807f48030861b818deafd7def8853bcc8a6ec6bab746521a9546b79b8baab82dce6b60405160405180910390a250565b60008073ffffffffffffffffffffffffffffffffffffffff166003600085815260200190815260200160002060000160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146200076a57600080fd5b6000825114156200077a57600080fd5b60608251604051908082528060200260200182016040528015620007ad5781602001602082028038833980820191505090505b50905060008090505b83518110156200086b576000848281518110620007cf57fe5b6020026020010151604051602001620007e9919062001ee3565b6040516020818303038152906040528051906020012060001c90508482815181106200081157fe5b6020026020010151600460008381526020019081526020016000209080519060200190620008419291906200191a565b50808383815181106200085057fe5b602002602001018181525050508080600101915050620007b6565b506000809050600080905060008090506040518060e001604052808415158152602001831515815260200182151581526020013373ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001858152602001888152506003600089815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff02191690831515021790555060408201518160000160026101000a81548160ff02191690831515021790555060608201518160000160036101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a082015181600201908051906020019062000a00929190620019a1565b5060c08201518160030155905050863373ffffffffffffffffffffffffffffffffffffffff167fcf93cb8f3f726dd083e429df912bf338cc7f82cc3344b3ab5fa960ef0357e32160405160405180910390a38694505050505092915050565b62000a696200129d565b62000a7357600080fd5b62000a898160026200162f90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fe1434e25d6611e0db941968fdc97811c982ac1602e951637d206f5fdda9dd8f160405160405180910390a250565b62000ad96200129d565b62000ae357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060000160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141562000b5457600080fd5b600015156003600083815260200190815260200160002060000160019054906101000a900460ff161515141562000b8a57600080fd5b60006003600083815260200190815260200160002060000160016101000a81548160ff021916908315150217905550807ff12d3e50d9ed05d035c02b9f29e1da20004bce112d4fbe2cc0f0ba272ee5d97760405160405180910390a250565b62000bf36200129d565b62000bfd57600080fd5b62000c13816002620016de90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fe366c1c0452ed8eec96861e9e54141ebff23c9ec89fe27b996b45f5ec388498760405160405180910390a250565b60006003600083815260200190815260200160002090508060000160029054906101000a900460ff161562000c8d57600080fd5b62000c976200129d565b8062000cf257508060000160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b62000cfc57600080fd5b60008160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663bb57a5ed6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562000d6e57600080fd5b505af115801562000d83573d6000803e3d6000fd5b5050505060018260000160026101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff16837fde05e689a2a03aa3267e2f457184c649b080aaa00013ed27d21b85bcb04901ff60405160405180910390a3505050565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801562000e875780601f1062000e5b5761010080835404028352916020019162000e87565b820191906000526020600020905b81548152906001019060200180831162000e6957829003601f168201915b505050505081565b6000806003600084815260200190815260200160002090508060000160009054906101000a900460ff1662000ec357600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168160000160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161462000f2057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161462000f7e57600080fd5b600083338360020160405162000f9490620019f3565b62000fa29392919062002008565b604051809103906000f08015801562000fbf573d6000803e3d6000fd5b5090508073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156200100b57600080fd5b505af115801562001020573d6000803e3d6000fd5b5050505050808260010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f1bd63527042f119292b792487cee2f3e2f788737aa8ce9c0b5e79a2e17bd6bab60405160405180910390a38160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1692505050919050565b620011086200129d565b6200111257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60036020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900460ff16908060000160029054906101000a900460ff16908060000160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154905086565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b620012fe6200129d565b6200130857600080fd5b6000600360008581526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156200137e57600080fd5b80600201805490508251146200139357600080fd5b60008160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663356939ab85856040518363ffffffff1660e01b8152600401620013f99291906200204c565b600060405180830381600087803b1580156200141457600080fd5b505af115801562001429573d6000803e3d6000fd5b5050505083857f79f21a91842ed307e9fade5e30c0d0322ee9f1f64d3918e3d8b2815f02ce85d660405160405180910390a35050505050565b60046020528060005260406000206000915090508054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156200150e5780601f10620014e2576101008083540402835291602001916200150e565b820191906000526020600020905b815481529060010190602001808311620014f057829003601f168201915b505050505081565b620015206200129d565b6200152a57600080fd5b6000600360008381526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160000160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415620015a057600080fd5b60018160000160006101000a81548160ff021916908315150217905550817f8fd81831397822207cf7571ac8b61f51ae7de628b05492a586bc63c3fd23bf8c60405160405180910390a25050565b620015f86200129d565b6200160257600080fd5b6200160d816200178e565b50565b6000620016288260026200188790919063ffffffff16565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156200166a57600080fd5b62001676828262001887565b6200168057600080fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156200171957600080fd5b62001725828262001887565b156200173057600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620017c957600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415620018c357600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200195d57805160ff19168380011785556200198e565b828001600101855582156200198e579182015b828111156200198d57825182559160200191906001019062001970565b5b5090506200199d919062001a01565b5090565b828054828255906000526020600020908101928215620019e0579160200282015b82811115620019df578251825591602001919060010190620019c2565b5b509050620019ef919062001a01565b5090565b6123b680620022f883390190565b62001a2691905b8082111562001a2257600081600090555060010162001a08565b5090565b90565b60008135905062001a3a81620022c3565b92915050565b600082601f83011262001a5257600080fd5b813562001a6962001a6382620020ae565b62002080565b9150818183526020840193506020810190508360005b8381101562001ab3578135860162001a98888262001b4a565b84526020840193506020830192505060018101905062001a7f565b5050505092915050565b600082601f83011262001acf57600080fd5b813562001ae662001ae082620020d7565b62002080565b9150818183526020840193506020810190508385602084028201111562001b0c57600080fd5b60005b8381101562001b40578162001b25888262001ba6565b84526020840193506020830192505060018101905062001b0f565b5050505092915050565b600082601f83011262001b5c57600080fd5b813562001b7362001b6d8262002100565b62002080565b9150808252602083016020830185838301111562001b9057600080fd5b62001b9d8382846200222d565b50505092915050565b60008135905062001bb781620022dd565b92915050565b60006020828403121562001bd057600080fd5b600062001be08482850162001a29565b91505092915050565b60006020828403121562001bfc57600080fd5b600062001c0c8482850162001ba6565b91505092915050565b6000806040838503121562001c2957600080fd5b600062001c398582860162001ba6565b925050602083013567ffffffffffffffff81111562001c5757600080fd5b62001c658582860162001a40565b9150509250929050565b60008060006060848603121562001c8557600080fd5b600062001c958682870162001ba6565b935050602062001ca88682870162001ba6565b925050604084013567ffffffffffffffff81111562001cc657600080fd5b62001cd48682870162001abd565b9150509250925092565b600062001cec838362001ec1565b60208301905092915050565b62001d0381620021e3565b82525050565b62001d1481620021cf565b82525050565b600062001d278262002152565b62001d33818562002198565b935062001d40836200212d565b8060005b8381101562001d7757815162001d5b888262001cde565b975062001d68836200217e565b92505060018101905062001d44565b5085935050505092915050565b600062001d91826200215d565b62001d9d818562002198565b935062001daa836200213d565b8060005b8381101562001dea5762001dc28262002290565b62001dce888262001cde565b975062001ddb836200218b565b92505060018101905062001dae565b5085935050505092915050565b62001e0281620021f7565b82525050565b600062001e158262002173565b62001e218185620021a9565b935062001e338185602086016200223c565b62001e3e81620022a5565b840191505092915050565b600062001e568262002168565b62001e628185620021a9565b935062001e748185602086016200223c565b62001e7f81620022a5565b840191505092915050565b600062001e978262002168565b62001ea38185620021ba565b935062001eb58185602086016200223c565b80840191505092915050565b62001ecc8162002223565b82525050565b62001edd8162002223565b82525050565b600062001ef1828462001e8a565b915081905092915050565b600060208201905062001f13600083018462001d09565b92915050565b600060208201905062001f30600083018462001df7565b92915050565b600060c08201905062001f4d600083018962001df7565b62001f5c602083018862001df7565b62001f6b604083018762001df7565b62001f7a606083018662001d09565b62001f89608083018562001d09565b62001f9860a083018462001ed2565b979650505050505050565b6000602082019050818103600083015262001fbf818462001e49565b905092915050565b6000602082019050818103600083015262001fe3818462001e08565b905092915050565b600060208201905062002002600083018462001ed2565b92915050565b60006060820190506200201f600083018662001ed2565b6200202e602083018562001cf8565b818103604083015262002042818462001d84565b9050949350505050565b600060408201905062002063600083018562001ed2565b818103602083015262002077818462001d1a565b90509392505050565b6000604051905081810181811067ffffffffffffffff82111715620020a457600080fd5b8060405250919050565b600067ffffffffffffffff821115620020c657600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115620020ef57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156200211857600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081549050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000600182019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000819050919050565b6000620021dc8262002203565b9050919050565b6000620021f08262002203565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156200225c5780820151818401526020810190506200223f565b838111156200226c576000848401525b50505050565b6000620022896200228383620022b6565b620021c5565b9050919050565b60006200229e825462002272565b9050919050565b6000601f19601f8301169050919050565b60008160001c9050919050565b620022ce81620021cf565b8114620022da57600080fd5b50565b620022e88162002223565b8114620022f457600080fd5b5056fe60806040523480156200001157600080fd5b50604051620023b6380380620023b6833981810160405260608110156200003757600080fd5b810190808051906020019092919080519060200190929190805160405193929190846401000000008211156200006c57600080fd5b838201915060208201858111156200008357600080fd5b8251866020820283011164010000000082111715620000a157600080fd5b8083526020830192505050908051906020019060200280838360005b83811015620000da578082015181840152602081019050620000bd565b5050505090500160405250505081600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156200012357600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508260028190555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060089080519060200190620001c49291906200027a565b5060008090505b6008805490508110156200027057620001e3620002cc565b6001816000019015159081151581525050818160200181815250508060076000600885815481106200021157fe5b9060005260206000200154815260200190815260200160002060008201518160000160006101000a81548160ff0219169083151502179055506020820151816001015560408201518160020155905050508080600101915050620001cb565b5050505062000317565b828054828255906000526020600020908101928215620002b9579160200282015b82811115620002b85782518255916020019190600101906200029b565b5b509050620002c89190620002ef565b5090565b604051806060016040528060001515815260200160008152602001600081525090565b6200031491905b8082111562000310576000816000905550600101620002f6565b5090565b90565b61208f80620003276000396000f3fe6080604052600436106101b65760003560e01c806362372298116100ec578063bf032f531161008a578063d0e30db011610064578063d0e30db014610a8e578063d78e647f14610a98578063eda0ce1714610add578063fc1028bc14610b36576101b6565b8063bf032f53146108fb578063c5d0b14c146109c1578063c617519314610a22576101b6565b80637b40855d116100c65780637b40855d1461081b578063af640d0f14610874578063bb57a5ed1461089f578063bbe58b0c146108b6576101b6565b8063623722981461070757806373f93b2a14610797578063747f7589146107c2576101b6565b80632f750f20116101595780633fa911ae116101335780633fa911ae1461060d578063481c6a751461063c5780634c0b715c14610693578063590e1ae3146106f0576101b6565b80632f750f2014610480578063356939ab146105135780633697611a146105e2576101b6565b806312fa6feb1161019557806312fa6feb1461030e5780631bb62fc41461033d5780631f54e5bd1461039057806328cc413a146103e3576101b6565b8062ca5d92146101bb5780630d8e6e2c14610227578063109e94cf146102b7575b600080fd5b3480156101c757600080fd5b506101d0610b65565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156102135780820151818401526020810190506101f8565b505050509050019250505060405180910390f35b34801561023357600080fd5b5061023c610bbd565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561027c578082015181840152602081019050610261565b50505050905090810190601f1680156102a95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102c357600080fd5b506102cc610d25565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561031a57600080fd5b50610323610d4a565b604051808215151515815260200191505060405180910390f35b34801561034957600080fd5b506103766004803603602081101561036057600080fd5b8101908080359060200190929190505050610d5d565b604051808215151515815260200191505060405180910390f35b34801561039c57600080fd5b506103c9600480360360208110156103b357600080fd5b8101908080359060200190929190505050610d7d565b604051808215151515815260200191505060405180910390f35b3480156103ef57600080fd5b506104306004803603606081101561040657600080fd5b81019080803590602001909291908035906020019092919080359060200190929190505050610dc4565b604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390f35b34801561048c57600080fd5b506104c3600480360360408110156104a357600080fd5b810190808035906020019092919080359060200190929190505050610ef2565b604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390f35b34801561051f57600080fd5b506105e06004803603604081101561053657600080fd5b81019080803590602001909291908035906020019064010000000081111561055d57600080fd5b82018360208201111561056f57600080fd5b8035906020019184602083028401116401000000008311171561059157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050610f83565b005b3480156105ee57600080fd5b506105f76110a5565b6040518082815260200191505060405180910390f35b34801561061957600080fd5b506106226110b2565b604051808215151515815260200191505060405180910390f35b34801561064857600080fd5b5061065161119b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561069f57600080fd5b506106d6600480360360408110156106b657600080fd5b8101908080359060200190929190803590602001909291905050506111c1565b604051808215151515815260200191505060405180910390f35b3480156106fc57600080fd5b506107056112a1565b005b34801561071357600080fd5b506107406004803603602081101561072a57600080fd5b8101908080359060200190929190505050611359565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610783578082015181840152602081019050610768565b505050509050019250505060405180910390f35b3480156107a357600080fd5b506107ac611468565b6040518082815260200191505060405180910390f35b3480156107ce57600080fd5b50610819600480360360808110156107e557600080fd5b8101908080359060200190929190803590602001909291908035906020019092919080359060200190929190505050611475565b005b34801561082757600080fd5b5061085e6004803603604081101561083e57600080fd5b810190808035906020019092919080359060200190929190505050611651565b6040518082815260200191505060405180910390f35b34801561088057600080fd5b506108896116e4565b6040518082815260200191505060405180910390f35b3480156108ab57600080fd5b506108b46116ea565b005b3480156108c257600080fd5b506108f9600480360360408110156108d957600080fd5b81019080803590602001909291908035906020019092919050505061177b565b005b34801561090757600080fd5b5061093e6004803603604081101561091e57600080fd5b810190808035906020019092919080359060200190929190505050611998565b604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815260200194505050505060405180910390f35b3480156109cd57600080fd5b506109fa600480360360208110156109e457600080fd5b8101908080359060200190929190505050611aa3565b6040518084151515158152602001838152602001828152602001935050505060405180910390f35b348015610a2e57600080fd5b50610a37611ada565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610a7a578082015181840152602081019050610a5f565b505050509050019250505060405180910390f35b610a96611b32565b005b348015610aa457600080fd5b50610adb60048036036040811015610abb57600080fd5b810190808035906020019092919080359060200190929190505050611b61565b005b348015610ae957600080fd5b50610b2060048036036040811015610b0057600080fd5b810190808035906020019092919080359060200190929190505050611e52565b6040518082815260200191505060405180910390f35b348015610b4257600080fd5b50610b4b611e80565b604051808215151515815260200191505060405180910390f35b60606008805480602002602001604051908101604052809291908181526020018280548015610bb357602002820191906000526020600020905b815481526020019060010190808311610b9f575b5050505050905090565b6060600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630d8e6e2c6040518163ffffffff1660e01b815260040160006040518083038186803b158015610c2757600080fd5b505afa158015610c3b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015610c6557600080fd5b8101908080516040519392919084640100000000821115610c8557600080fd5b83820191506020820185811115610c9b57600080fd5b8251866001820283011164010000000082111715610cb857600080fd5b8083526020830192505050908051906020019080838360005b83811015610cec578082015181840152602081019050610cd1565b50505050905090810190601f168015610d195780820380516001836020036101000a031916815260200191505b50604052505050905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900460ff1681565b60046020528060005260406000206000915054906101000a900460ff1681565b6000806007600084815260200190815260200160002090508060000160009054906101000a900460ff16610db057600080fd5b600680549050816002015414915050919050565b60008060008060076000888152602001908152602001600020600301600087815260200190815260200160002090506007600088815260200190815260200160002060000160009054906101000a900460ff168015610e4057506004600087815260200190815260200160002060009054906101000a900460ff165b610e4957600080fd5b80600001805490508510610e5c57600080fd5b806000018581548110610e6b57fe5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16816000018681548110610eac57fe5b906000526020600020906003020160010154826000018781548110610ecd57fe5b9060005260206000209060030201600201548292509350935093505093509350939050565b600080600080600760008781526020019081526020016000206003016000868152602001908152602001600020905060008160000180549050905060008111610f3a57600080fd5b60008260010154905081811015610f6457610f56888883610dc4565b955095509550505050610f7c565b60008060008292508191508090509550955095505050505b9250925092565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610fdd57600080fd5b6004600083815260200190815260200160002060009054906101000a900460ff161580156110185750600360009054906101000a900460ff16155b61102157600080fd5b60016004600084815260200190815260200160002060006101000a81548160ff02191690831515021790555080600560008481526020019081526020016000209080519060200190611074929190611fe8565b5060068290806001815401808255809150509060018203906000526020600020016000909192909190915055505050565b6000600880549050905090565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630f5147176002546040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561112a57600080fd5b505afa15801561113e573d6000803e3d6000fd5b505050506040513d602081101561115457600080fd5b810190808051906020019092919050505090506000611171611e80565b80156111895750600360009054906101000a900460ff165b905081806111945750805b9250505090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806007600085815260200190815260200160002090506004600084815260200190815260200160002060009054906101000a900460ff16801561121457508060000160009054906101000a900460ff165b61121d57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff1660076000868152602001908152602001600020600301600085815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141591505092915050565b6112a96110b2565b6112b257600080fd5b60004790506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561131e573d6000803e3d6000fd5b507f3d2a04f53164bedf9a8a46353305d6b2d2261410406df3b41f99ce6489dc003c816040518082815260200191505060405180910390a150565b606061136482610d7d565b61136d57600080fd5b600060076000848152602001908152602001600020905060606006805490506040519080825280602002602001820160405280156113ba5781602001602082028038833980820191505090505b50905060008090505b60068054905081101561145d576000600682815481106113df57fe5b9060005260206000200154905060008460030160008381526020019081526020016000209050600081600101549050600082600001828154811061141f57fe5b90600052602060002090600302016001015490508086868151811061144057fe5b6020026020010181815250505050505080806001019150506113c3565b508092505050919050565b6000600680549050905090565b600060076000868152602001908152602001600020600301600085815260200190815260200160002090506004600085815260200190815260200160002060009054906101000a900460ff16801561151d5750600073ffffffffffffffffffffffffffffffffffffffff168160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b61152657600080fd5b6007600086815260200190815260200160002060000160009054906101000a900460ff1661155357600080fd5b8060000160405180606001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001848152602001858152509080600181540180825580915050906001820390600052602060002090600302016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155505050600181600001805490500385857fe176ecde2cccccb4849f78f5d9f8378a179f72033c2fc649f90820a324cfaa7160405160405180910390a45050505050565b60008060076000858152602001908152602001600020600301600084815260200190815260200160002090506007600085815260200190815260200160002060000160009054906101000a900460ff1680156116ca57506004600084815260200190815260200160002060009054906101000a900460ff165b6116d357600080fd5b806000018054905091505092915050565b60025481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461174457600080fd5b600360009054906101000a900460ff161561175e57600080fd5b6001600360006101000a81548160ff021916908315150217905550565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663facd743b336040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561181a57600080fd5b505afa15801561182e573d6000803e3d6000fd5b505050506040513d602081101561184457600080fd5b810190808051906020019092919050505061185e57600080fd5b600060076000848152602001908152602001600020600301600083815260200190815260200160002090506004600083815260200190815260200160002060009054906101000a900460ff1680156119065750600073ffffffffffffffffffffffffffffffffffffffff168160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b61190f57600080fd5b806000018054905061192f60018360010154611ed990919063ffffffff16565b111561193a57600080fd5b60008160010154905061195b60018360010154611ed990919063ffffffff16565b82600101819055508083857fb25faf3bb93b5105c8bc184c6af20f251543b1fdd93cd5c6f9f31b13c138b91a60405160405180910390a450505050565b6000806000806119a886866111c1565b6119b157600080fd5b600060076000888152602001908152602001600020600301600087815260200190815260200160002090506000816001015490508160000181815481106119f457fe5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168260020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836000018381548110611a5a57fe5b906000526020600020906003020160010154846000018481548110611a7b57fe5b9060005260206000209060030201600201548393509550955095509550505092959194509250565b60076020528060005260406000206000915090508060000160009054906101000a900460ff16908060010154908060020154905083565b60606006805480602002602001604051908101604052809291908181526020018280548015611b2857602002820191906000526020600020905b815481526020019060010190808311611b14575b5050505050905090565b347f2a89b2e3d580398d6dc2db5e0f336b52602bbaa51afa9bb5cdf59239cf0d2bea60405160405180910390a2565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663facd743b336040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611c0057600080fd5b505afa158015611c14573d6000803e3d6000fd5b505050506040513d6020811015611c2a57600080fd5b8101908080519060200190929190505050611c4457600080fd5b60006007600084815260200190815260200160002090508060000160009054906101000a900460ff16611c7657600080fd5b600081600301600084815260200190815260200160002090506004600084815260200190815260200160002060009054906101000a900460ff168015611d0c5750600073ffffffffffffffffffffffffffffffffffffffff168160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b611d1557600080fd5b8060000180549050816001015410611d2c57600080fd5b600081600001826001015481548110611d4157fe5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600060056000868152602001908152602001600020846001015481548110611d9957fe5b906000526020600020015490506000611db28383611ef8565b905080611dc3575050505050611e4e565b338460020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550846002016000815480929190600101919050555085877f6e0dd2be4d72dbf12213042a47491e605ec38b66d076e6f74e9f458373080e3760405160405180910390a350505050505b5050565b60056020528160005260406000208181548110611e6b57fe5b90600052602060002001600091509150505481565b600080600090505b600880549050811015611ed057611eb560088281548110611ea557fe5b9060005260206000200154610d7d565b611ec3576000915050611ed6565b8080600101915050611e88565b50600190505b90565b600080828401905083811015611eee57600080fd5b8091505092915050565b6000804790506000811480611f0c57508281105b15611f47577f5cc4d4e2397f909efdc05489f71c523c59913a6ffde292799faaca096635e16d60405160405180910390a16000915050611fe2565b8373ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f19350505050158015611f8d573d6000803e3d6000fd5b508373ffffffffffffffffffffffffffffffffffffffff167fbccbe05a3719eacef984f404dd2adff555adcc05fb72fb8b309bafbd462cd6f7846040518082815260200191505060405180910390a260019150505b92915050565b828054828255906000526020600020908101928215612024579160200282015b82811115612023578251825591602001919060010190612008565b5b5090506120319190612035565b5090565b61205791905b8082111561205357600081600090555060010161203b565b5090565b9056fea265627a7a723158200a43dcc106c9cbd6b34fe88f194db3a5299f3adb6f475c4cba4879ddbd93b28064736f6c63430005100032a365627a7a723158202ceae9eb4eb767197f02108ac56a72c10a33a253116d8746031b0515d44f8a616c6578706572696d656e74616cf564736f6c63430005100040"

// DeployStreamManager deploys a new Ethereum contract, binding an instance of StreamManager to it.
func DeployStreamManager(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *StreamManager, error) {
	parsed, err := abi.JSON(strings.NewReader(StreamManagerABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(StreamManagerBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StreamManager{StreamManagerCaller: StreamManagerCaller{contract: contract}, StreamManagerTransactor: StreamManagerTransactor{contract: contract}, StreamManagerFilterer: StreamManagerFilterer{contract: contract}}, nil
}

// StreamManager is an auto generated Go binding around an Ethereum contract.
type StreamManager struct {
	StreamManagerCaller     // Read-only binding to the contract
	StreamManagerTransactor // Write-only binding to the contract
	StreamManagerFilterer   // Log filterer for contract events
}

// StreamManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type StreamManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StreamManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StreamManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StreamManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StreamManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StreamManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StreamManagerSession struct {
	Contract     *StreamManager    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StreamManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StreamManagerCallerSession struct {
	Contract *StreamManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// StreamManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StreamManagerTransactorSession struct {
	Contract     *StreamManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// StreamManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type StreamManagerRaw struct {
	Contract *StreamManager // Generic contract binding to access the raw methods on
}

// StreamManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StreamManagerCallerRaw struct {
	Contract *StreamManagerCaller // Generic read-only contract binding to access the raw methods on
}

// StreamManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StreamManagerTransactorRaw struct {
	Contract *StreamManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStreamManager creates a new instance of StreamManager, bound to a specific deployed contract.
func NewStreamManager(address common.Address, backend bind.ContractBackend) (*StreamManager, error) {
	contract, err := bindStreamManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StreamManager{StreamManagerCaller: StreamManagerCaller{contract: contract}, StreamManagerTransactor: StreamManagerTransactor{contract: contract}, StreamManagerFilterer: StreamManagerFilterer{contract: contract}}, nil
}

// NewStreamManagerCaller creates a new read-only instance of StreamManager, bound to a specific deployed contract.
func NewStreamManagerCaller(address common.Address, caller bind.ContractCaller) (*StreamManagerCaller, error) {
	contract, err := bindStreamManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StreamManagerCaller{contract: contract}, nil
}

// NewStreamManagerTransactor creates a new write-only instance of StreamManager, bound to a specific deployed contract.
func NewStreamManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*StreamManagerTransactor, error) {
	contract, err := bindStreamManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StreamManagerTransactor{contract: contract}, nil
}

// NewStreamManagerFilterer creates a new log filterer instance of StreamManager, bound to a specific deployed contract.
func NewStreamManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*StreamManagerFilterer, error) {
	contract, err := bindStreamManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StreamManagerFilterer{contract: contract}, nil
}

// bindStreamManager binds a generic wrapper to an already deployed contract.
func bindStreamManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StreamManagerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StreamManager *StreamManagerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _StreamManager.Contract.StreamManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StreamManager *StreamManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StreamManager.Contract.StreamManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StreamManager *StreamManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StreamManager.Contract.StreamManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StreamManager *StreamManagerCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _StreamManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StreamManager *StreamManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StreamManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StreamManager *StreamManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StreamManager.Contract.contract.Transact(opts, method, params...)
}

// GetVersion is a free data retrieval call binding the contract method 0x0d8e6e2c.
//
// Solidity: function getVersion() constant returns(string)
func (_StreamManager *StreamManagerCaller) GetVersion(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _StreamManager.contract.Call(opts, out, "getVersion")
	return *ret0, err
}

// GetVersion is a free data retrieval call binding the contract method 0x0d8e6e2c.
//
// Solidity: function getVersion() constant returns(string)
func (_StreamManager *StreamManagerSession) GetVersion() (string, error) {
	return _StreamManager.Contract.GetVersion(&_StreamManager.CallOpts)
}

// GetVersion is a free data retrieval call binding the contract method 0x0d8e6e2c.
//
// Solidity: function getVersion() constant returns(string)
func (_StreamManager *StreamManagerCallerSession) GetVersion() (string, error) {
	return _StreamManager.Contract.GetVersion(&_StreamManager.CallOpts)
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() constant returns(bool)
func (_StreamManager *StreamManagerCaller) IsOwner(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _StreamManager.contract.Call(opts, out, "isOwner")
	return *ret0, err
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() constant returns(bool)
func (_StreamManager *StreamManagerSession) IsOwner() (bool, error) {
	return _StreamManager.Contract.IsOwner(&_StreamManager.CallOpts)
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() constant returns(bool)
func (_StreamManager *StreamManagerCallerSession) IsOwner() (bool, error) {
	return _StreamManager.Contract.IsOwner(&_StreamManager.CallOpts)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address v) constant returns(bool)
func (_StreamManager *StreamManagerCaller) IsValidator(opts *bind.CallOpts, v common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _StreamManager.contract.Call(opts, out, "isValidator", v)
	return *ret0, err
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address v) constant returns(bool)
func (_StreamManager *StreamManagerSession) IsValidator(v common.Address) (bool, error) {
	return _StreamManager.Contract.IsValidator(&_StreamManager.CallOpts, v)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(address v) constant returns(bool)
func (_StreamManager *StreamManagerCallerSession) IsValidator(v common.Address) (bool, error) {
	return _StreamManager.Contract.IsValidator(&_StreamManager.CallOpts, v)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_StreamManager *StreamManagerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _StreamManager.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_StreamManager *StreamManagerSession) Owner() (common.Address, error) {
	return _StreamManager.Contract.Owner(&_StreamManager.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_StreamManager *StreamManagerCallerSession) Owner() (common.Address, error) {
	return _StreamManager.Contract.Owner(&_StreamManager.CallOpts)
}

// Profiles is a free data retrieval call binding the contract method 0xc36fe3d6.
//
// Solidity: function profiles(uint256 ) constant returns(string)
func (_StreamManager *StreamManagerCaller) Profiles(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _StreamManager.contract.Call(opts, out, "profiles", arg0)
	return *ret0, err
}

// Profiles is a free data retrieval call binding the contract method 0xc36fe3d6.
//
// Solidity: function profiles(uint256 ) constant returns(string)
func (_StreamManager *StreamManagerSession) Profiles(arg0 *big.Int) (string, error) {
	return _StreamManager.Contract.Profiles(&_StreamManager.CallOpts, arg0)
}

// Profiles is a free data retrieval call binding the contract method 0xc36fe3d6.
//
// Solidity: function profiles(uint256 ) constant returns(string)
func (_StreamManager *StreamManagerCallerSession) Profiles(arg0 *big.Int) (string, error) {
	return _StreamManager.Contract.Profiles(&_StreamManager.CallOpts, arg0)
}

// RefundAllowed is a free data retrieval call binding the contract method 0x0f514717.
//
// Solidity: function refundAllowed(uint256 streamId) constant returns(bool)
func (_StreamManager *StreamManagerCaller) RefundAllowed(opts *bind.CallOpts, streamId *big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _StreamManager.contract.Call(opts, out, "refundAllowed", streamId)
	return *ret0, err
}

// RefundAllowed is a free data retrieval call binding the contract method 0x0f514717.
//
// Solidity: function refundAllowed(uint256 streamId) constant returns(bool)
func (_StreamManager *StreamManagerSession) RefundAllowed(streamId *big.Int) (bool, error) {
	return _StreamManager.Contract.RefundAllowed(&_StreamManager.CallOpts, streamId)
}

// RefundAllowed is a free data retrieval call binding the contract method 0x0f514717.
//
// Solidity: function refundAllowed(uint256 streamId) constant returns(bool)
func (_StreamManager *StreamManagerCallerSession) RefundAllowed(streamId *big.Int) (bool, error) {
	return _StreamManager.Contract.RefundAllowed(&_StreamManager.CallOpts, streamId)
}

// Requests is a free data retrieval call binding the contract method 0x81d12c58.
//
// Solidity: function requests(uint256 ) constant returns(bool approved, bool refund, bool ended, address client, address stream, uint256 streamId)
func (_StreamManager *StreamManagerCaller) Requests(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Approved bool
	Refund   bool
	Ended    bool
	Client   common.Address
	Stream   common.Address
	StreamId *big.Int
}, error) {
	ret := new(struct {
		Approved bool
		Refund   bool
		Ended    bool
		Client   common.Address
		Stream   common.Address
		StreamId *big.Int
	})
	out := ret
	err := _StreamManager.contract.Call(opts, out, "requests", arg0)
	return *ret, err
}

// Requests is a free data retrieval call binding the contract method 0x81d12c58.
//
// Solidity: function requests(uint256 ) constant returns(bool approved, bool refund, bool ended, address client, address stream, uint256 streamId)
func (_StreamManager *StreamManagerSession) Requests(arg0 *big.Int) (struct {
	Approved bool
	Refund   bool
	Ended    bool
	Client   common.Address
	Stream   common.Address
	StreamId *big.Int
}, error) {
	return _StreamManager.Contract.Requests(&_StreamManager.CallOpts, arg0)
}

// Requests is a free data retrieval call binding the contract method 0x81d12c58.
//
// Solidity: function requests(uint256 ) constant returns(bool approved, bool refund, bool ended, address client, address stream, uint256 streamId)
func (_StreamManager *StreamManagerCallerSession) Requests(arg0 *big.Int) (struct {
	Approved bool
	Refund   bool
	Ended    bool
	Client   common.Address
	Stream   common.Address
	StreamId *big.Int
}, error) {
	return _StreamManager.Contract.Requests(&_StreamManager.CallOpts, arg0)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(string)
func (_StreamManager *StreamManagerCaller) Version(opts *bind.CallOpts) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _StreamManager.contract.Call(opts, out, "version")
	return *ret0, err
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(string)
func (_StreamManager *StreamManagerSession) Version() (string, error) {
	return _StreamManager.Contract.Version(&_StreamManager.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() constant returns(string)
func (_StreamManager *StreamManagerCallerSession) Version() (string, error) {
	return _StreamManager.Contract.Version(&_StreamManager.CallOpts)
}

// AddInputChunkId is a paid mutator transaction binding the contract method 0xb56b9f16.
//
// Solidity: function addInputChunkId(uint256 streamId, uint256 chunkId, uint256[] wattages) returns()
func (_StreamManager *StreamManagerTransactor) AddInputChunkId(opts *bind.TransactOpts, streamId *big.Int, chunkId *big.Int, wattages []*big.Int) (*types.Transaction, error) {
	return _StreamManager.contract.Transact(opts, "addInputChunkId", streamId, chunkId, wattages)
}

// AddInputChunkId is a paid mutator transaction binding the contract method 0xb56b9f16.
//
// Solidity: function addInputChunkId(uint256 streamId, uint256 chunkId, uint256[] wattages) returns()
func (_StreamManager *StreamManagerSession) AddInputChunkId(streamId *big.Int, chunkId *big.Int, wattages []*big.Int) (*types.Transaction, error) {
	return _StreamManager.Contract.AddInputChunkId(&_StreamManager.TransactOpts, streamId, chunkId, wattages)
}

// AddInputChunkId is a paid mutator transaction binding the contract method 0xb56b9f16.
//
// Solidity: function addInputChunkId(uint256 streamId, uint256 chunkId, uint256[] wattages) returns()
func (_StreamManager *StreamManagerTransactorSession) AddInputChunkId(streamId *big.Int, chunkId *big.Int, wattages []*big.Int) (*types.Transaction, error) {
	return _StreamManager.Contract.AddInputChunkId(&_StreamManager.TransactOpts, streamId, chunkId, wattages)
}

// AddValidator is a paid mutator transaction binding the contract method 0x4d238c8e.
//
// Solidity: function addValidator(address v) returns()
func (_StreamManager *StreamManagerTransactor) AddValidator(opts *bind.TransactOpts, v common.Address) (*types.Transaction, error) {
	return _StreamManager.contract.Transact(opts, "addValidator", v)
}

// AddValidator is a paid mutator transaction binding the contract method 0x4d238c8e.
//
// Solidity: function addValidator(address v) returns()
func (_StreamManager *StreamManagerSession) AddValidator(v common.Address) (*types.Transaction, error) {
	return _StreamManager.Contract.AddValidator(&_StreamManager.TransactOpts, v)
}

// AddValidator is a paid mutator transaction binding the contract method 0x4d238c8e.
//
// Solidity: function addValidator(address v) returns()
func (_StreamManager *StreamManagerTransactorSession) AddValidator(v common.Address) (*types.Transaction, error) {
	return _StreamManager.Contract.AddValidator(&_StreamManager.TransactOpts, v)
}

// AllowRefund is a paid mutator transaction binding the contract method 0x225f6541.
//
// Solidity: function allowRefund(uint256 streamId) returns()
func (_StreamManager *StreamManagerTransactor) AllowRefund(opts *bind.TransactOpts, streamId *big.Int) (*types.Transaction, error) {
	return _StreamManager.contract.Transact(opts, "allowRefund", streamId)
}

// AllowRefund is a paid mutator transaction binding the contract method 0x225f6541.
//
// Solidity: function allowRefund(uint256 streamId) returns()
func (_StreamManager *StreamManagerSession) AllowRefund(streamId *big.Int) (*types.Transaction, error) {
	return _StreamManager.Contract.AllowRefund(&_StreamManager.TransactOpts, streamId)
}

// AllowRefund is a paid mutator transaction binding the contract method 0x225f6541.
//
// Solidity: function allowRefund(uint256 streamId) returns()
func (_StreamManager *StreamManagerTransactorSession) AllowRefund(streamId *big.Int) (*types.Transaction, error) {
	return _StreamManager.Contract.AllowRefund(&_StreamManager.TransactOpts, streamId)
}

// ApproveStreamCreation is a paid mutator transaction binding the contract method 0xecf9ac74.
//
// Solidity: function approveStreamCreation(uint256 streamId) returns()
func (_StreamManager *StreamManagerTransactor) ApproveStreamCreation(opts *bind.TransactOpts, streamId *big.Int) (*types.Transaction, error) {
	return _StreamManager.contract.Transact(opts, "approveStreamCreation", streamId)
}

// ApproveStreamCreation is a paid mutator transaction binding the contract method 0xecf9ac74.
//
// Solidity: function approveStreamCreation(uint256 streamId) returns()
func (_StreamManager *StreamManagerSession) ApproveStreamCreation(streamId *big.Int) (*types.Transaction, error) {
	return _StreamManager.Contract.ApproveStreamCreation(&_StreamManager.TransactOpts, streamId)
}

// ApproveStreamCreation is a paid mutator transaction binding the contract method 0xecf9ac74.
//
// Solidity: function approveStreamCreation(uint256 streamId) returns()
func (_StreamManager *StreamManagerTransactorSession) ApproveStreamCreation(streamId *big.Int) (*types.Transaction, error) {
	return _StreamManager.Contract.ApproveStreamCreation(&_StreamManager.TransactOpts, streamId)
}

// CreateStream is a paid mutator transaction binding the contract method 0x551479dd.
//
// Solidity: function createStream(uint256 streamId) returns(address)
func (_StreamManager *StreamManagerTransactor) CreateStream(opts *bind.TransactOpts, streamId *big.Int) (*types.Transaction, error) {
	return _StreamManager.contract.Transact(opts, "createStream", streamId)
}

// CreateStream is a paid mutator transaction binding the contract method 0x551479dd.
//
// Solidity: function createStream(uint256 streamId) returns(address)
func (_StreamManager *StreamManagerSession) CreateStream(streamId *big.Int) (*types.Transaction, error) {
	return _StreamManager.Contract.CreateStream(&_StreamManager.TransactOpts, streamId)
}

// CreateStream is a paid mutator transaction binding the contract method 0x551479dd.
//
// Solidity: function createStream(uint256 streamId) returns(address)
func (_StreamManager *StreamManagerTransactorSession) CreateStream(streamId *big.Int) (*types.Transaction, error) {
	return _StreamManager.Contract.CreateStream(&_StreamManager.TransactOpts, streamId)
}

// EndStream is a paid mutator transaction binding the contract method 0x50d55afc.
//
// Solidity: function endStream(uint256 streamId) returns()
func (_StreamManager *StreamManagerTransactor) EndStream(opts *bind.TransactOpts, streamId *big.Int) (*types.Transaction, error) {
	return _StreamManager.contract.Transact(opts, "endStream", streamId)
}

// EndStream is a paid mutator transaction binding the contract method 0x50d55afc.
//
// Solidity: function endStream(uint256 streamId) returns()
func (_StreamManager *StreamManagerSession) EndStream(streamId *big.Int) (*types.Transaction, error) {
	return _StreamManager.Contract.EndStream(&_StreamManager.TransactOpts, streamId)
}

// EndStream is a paid mutator transaction binding the contract method 0x50d55afc.
//
// Solidity: function endStream(uint256 streamId) returns()
func (_StreamManager *StreamManagerTransactorSession) EndStream(streamId *big.Int) (*types.Transaction, error) {
	return _StreamManager.Contract.EndStream(&_StreamManager.TransactOpts, streamId)
}

// RemoveValidator is a paid mutator transaction binding the contract method 0x40a141ff.
//
// Solidity: function removeValidator(address v) returns()
func (_StreamManager *StreamManagerTransactor) RemoveValidator(opts *bind.TransactOpts, v common.Address) (*types.Transaction, error) {
	return _StreamManager.contract.Transact(opts, "removeValidator", v)
}

// RemoveValidator is a paid mutator transaction binding the contract method 0x40a141ff.
//
// Solidity: function removeValidator(address v) returns()
func (_StreamManager *StreamManagerSession) RemoveValidator(v common.Address) (*types.Transaction, error) {
	return _StreamManager.Contract.RemoveValidator(&_StreamManager.TransactOpts, v)
}

// RemoveValidator is a paid mutator transaction binding the contract method 0x40a141ff.
//
// Solidity: function removeValidator(address v) returns()
func (_StreamManager *StreamManagerTransactorSession) RemoveValidator(v common.Address) (*types.Transaction, error) {
	return _StreamManager.Contract.RemoveValidator(&_StreamManager.TransactOpts, v)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_StreamManager *StreamManagerTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StreamManager.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_StreamManager *StreamManagerSession) RenounceOwnership() (*types.Transaction, error) {
	return _StreamManager.Contract.RenounceOwnership(&_StreamManager.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_StreamManager *StreamManagerTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _StreamManager.Contract.RenounceOwnership(&_StreamManager.TransactOpts)
}

// RequestStream is a paid mutator transaction binding the contract method 0x2c29980c.
//
// Solidity: function requestStream(uint256 streamId, string[] profileNames) returns(uint256)
func (_StreamManager *StreamManagerTransactor) RequestStream(opts *bind.TransactOpts, streamId *big.Int, profileNames []string) (*types.Transaction, error) {
	return _StreamManager.contract.Transact(opts, "requestStream", streamId, profileNames)
}

// RequestStream is a paid mutator transaction binding the contract method 0x2c29980c.
//
// Solidity: function requestStream(uint256 streamId, string[] profileNames) returns(uint256)
func (_StreamManager *StreamManagerSession) RequestStream(streamId *big.Int, profileNames []string) (*types.Transaction, error) {
	return _StreamManager.Contract.RequestStream(&_StreamManager.TransactOpts, streamId, profileNames)
}

// RequestStream is a paid mutator transaction binding the contract method 0x2c29980c.
//
// Solidity: function requestStream(uint256 streamId, string[] profileNames) returns(uint256)
func (_StreamManager *StreamManagerTransactorSession) RequestStream(streamId *big.Int, profileNames []string) (*types.Transaction, error) {
	return _StreamManager.Contract.RequestStream(&_StreamManager.TransactOpts, streamId, profileNames)
}

// RevokeRefund is a paid mutator transaction binding the contract method 0x4b51438c.
//
// Solidity: function revokeRefund(uint256 streamId) returns()
func (_StreamManager *StreamManagerTransactor) RevokeRefund(opts *bind.TransactOpts, streamId *big.Int) (*types.Transaction, error) {
	return _StreamManager.contract.Transact(opts, "revokeRefund", streamId)
}

// RevokeRefund is a paid mutator transaction binding the contract method 0x4b51438c.
//
// Solidity: function revokeRefund(uint256 streamId) returns()
func (_StreamManager *StreamManagerSession) RevokeRefund(streamId *big.Int) (*types.Transaction, error) {
	return _StreamManager.Contract.RevokeRefund(&_StreamManager.TransactOpts, streamId)
}

// RevokeRefund is a paid mutator transaction binding the contract method 0x4b51438c.
//
// Solidity: function revokeRefund(uint256 streamId) returns()
func (_StreamManager *StreamManagerTransactorSession) RevokeRefund(streamId *big.Int) (*types.Transaction, error) {
	return _StreamManager.Contract.RevokeRefund(&_StreamManager.TransactOpts, streamId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_StreamManager *StreamManagerTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _StreamManager.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_StreamManager *StreamManagerSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _StreamManager.Contract.TransferOwnership(&_StreamManager.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_StreamManager *StreamManagerTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _StreamManager.Contract.TransferOwnership(&_StreamManager.TransactOpts, newOwner)
}

// StreamManagerInputChunkAddedIterator is returned from FilterInputChunkAdded and is used to iterate over the raw logs and unpacked data for InputChunkAdded events raised by the StreamManager contract.
type StreamManagerInputChunkAddedIterator struct {
	Event *StreamManagerInputChunkAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StreamManagerInputChunkAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StreamManagerInputChunkAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StreamManagerInputChunkAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StreamManagerInputChunkAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StreamManagerInputChunkAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StreamManagerInputChunkAdded represents a InputChunkAdded event raised by the StreamManager contract.
type StreamManagerInputChunkAdded struct {
	StreamId *big.Int
	ChunkId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterInputChunkAdded is a free log retrieval operation binding the contract event 0x79f21a91842ed307e9fade5e30c0d0322ee9f1f64d3918e3d8b2815f02ce85d6.
//
// Solidity: event InputChunkAdded(uint256 indexed streamId, uint256 indexed chunkId)
func (_StreamManager *StreamManagerFilterer) FilterInputChunkAdded(opts *bind.FilterOpts, streamId []*big.Int, chunkId []*big.Int) (*StreamManagerInputChunkAddedIterator, error) {

	var streamIdRule []interface{}
	for _, streamIdItem := range streamId {
		streamIdRule = append(streamIdRule, streamIdItem)
	}
	var chunkIdRule []interface{}
	for _, chunkIdItem := range chunkId {
		chunkIdRule = append(chunkIdRule, chunkIdItem)
	}

	logs, sub, err := _StreamManager.contract.FilterLogs(opts, "InputChunkAdded", streamIdRule, chunkIdRule)
	if err != nil {
		return nil, err
	}
	return &StreamManagerInputChunkAddedIterator{contract: _StreamManager.contract, event: "InputChunkAdded", logs: logs, sub: sub}, nil
}

// WatchInputChunkAdded is a free log subscription operation binding the contract event 0x79f21a91842ed307e9fade5e30c0d0322ee9f1f64d3918e3d8b2815f02ce85d6.
//
// Solidity: event InputChunkAdded(uint256 indexed streamId, uint256 indexed chunkId)
func (_StreamManager *StreamManagerFilterer) WatchInputChunkAdded(opts *bind.WatchOpts, sink chan<- *StreamManagerInputChunkAdded, streamId []*big.Int, chunkId []*big.Int) (event.Subscription, error) {

	var streamIdRule []interface{}
	for _, streamIdItem := range streamId {
		streamIdRule = append(streamIdRule, streamIdItem)
	}
	var chunkIdRule []interface{}
	for _, chunkIdItem := range chunkId {
		chunkIdRule = append(chunkIdRule, chunkIdItem)
	}

	logs, sub, err := _StreamManager.contract.WatchLogs(opts, "InputChunkAdded", streamIdRule, chunkIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StreamManagerInputChunkAdded)
				if err := _StreamManager.contract.UnpackLog(event, "InputChunkAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInputChunkAdded is a log parse operation binding the contract event 0x79f21a91842ed307e9fade5e30c0d0322ee9f1f64d3918e3d8b2815f02ce85d6.
//
// Solidity: event InputChunkAdded(uint256 indexed streamId, uint256 indexed chunkId)
func (_StreamManager *StreamManagerFilterer) ParseInputChunkAdded(log types.Log) (*StreamManagerInputChunkAdded, error) {
	event := new(StreamManagerInputChunkAdded)
	if err := _StreamManager.contract.UnpackLog(event, "InputChunkAdded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// StreamManagerOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the StreamManager contract.
type StreamManagerOwnershipTransferredIterator struct {
	Event *StreamManagerOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StreamManagerOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StreamManagerOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StreamManagerOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StreamManagerOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StreamManagerOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StreamManagerOwnershipTransferred represents a OwnershipTransferred event raised by the StreamManager contract.
type StreamManagerOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_StreamManager *StreamManagerFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*StreamManagerOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _StreamManager.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &StreamManagerOwnershipTransferredIterator{contract: _StreamManager.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_StreamManager *StreamManagerFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *StreamManagerOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _StreamManager.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StreamManagerOwnershipTransferred)
				if err := _StreamManager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_StreamManager *StreamManagerFilterer) ParseOwnershipTransferred(log types.Log) (*StreamManagerOwnershipTransferred, error) {
	event := new(StreamManagerOwnershipTransferred)
	if err := _StreamManager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	return event, nil
}

// StreamManagerRefundAllowedIterator is returned from FilterRefundAllowed and is used to iterate over the raw logs and unpacked data for RefundAllowed events raised by the StreamManager contract.
type StreamManagerRefundAllowedIterator struct {
	Event *StreamManagerRefundAllowed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StreamManagerRefundAllowedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StreamManagerRefundAllowed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StreamManagerRefundAllowed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StreamManagerRefundAllowedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StreamManagerRefundAllowedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StreamManagerRefundAllowed represents a RefundAllowed event raised by the StreamManager contract.
type StreamManagerRefundAllowed struct {
	StreamId *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterRefundAllowed is a free log retrieval operation binding the contract event 0x48030861b818deafd7def8853bcc8a6ec6bab746521a9546b79b8baab82dce6b.
//
// Solidity: event RefundAllowed(uint256 indexed streamId)
func (_StreamManager *StreamManagerFilterer) FilterRefundAllowed(opts *bind.FilterOpts, streamId []*big.Int) (*StreamManagerRefundAllowedIterator, error) {

	var streamIdRule []interface{}
	for _, streamIdItem := range streamId {
		streamIdRule = append(streamIdRule, streamIdItem)
	}

	logs, sub, err := _StreamManager.contract.FilterLogs(opts, "RefundAllowed", streamIdRule)
	if err != nil {
		return nil, err
	}
	return &StreamManagerRefundAllowedIterator{contract: _StreamManager.contract, event: "RefundAllowed", logs: logs, sub: sub}, nil
}

// WatchRefundAllowed is a free log subscription operation binding the contract event 0x48030861b818deafd7def8853bcc8a6ec6bab746521a9546b79b8baab82dce6b.
//
// Solidity: event RefundAllowed(uint256 indexed streamId)
func (_StreamManager *StreamManagerFilterer) WatchRefundAllowed(opts *bind.WatchOpts, sink chan<- *StreamManagerRefundAllowed, streamId []*big.Int) (event.Subscription, error) {

	var streamIdRule []interface{}
	for _, streamIdItem := range streamId {
		streamIdRule = append(streamIdRule, streamIdItem)
	}

	logs, sub, err := _StreamManager.contract.WatchLogs(opts, "RefundAllowed", streamIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StreamManagerRefundAllowed)
				if err := _StreamManager.contract.UnpackLog(event, "RefundAllowed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRefundAllowed is a log parse operation binding the contract event 0x48030861b818deafd7def8853bcc8a6ec6bab746521a9546b79b8baab82dce6b.
//
// Solidity: event RefundAllowed(uint256 indexed streamId)
func (_StreamManager *StreamManagerFilterer) ParseRefundAllowed(log types.Log) (*StreamManagerRefundAllowed, error) {
	event := new(StreamManagerRefundAllowed)
	if err := _StreamManager.contract.UnpackLog(event, "RefundAllowed", log); err != nil {
		return nil, err
	}
	return event, nil
}

// StreamManagerRefundRevokedIterator is returned from FilterRefundRevoked and is used to iterate over the raw logs and unpacked data for RefundRevoked events raised by the StreamManager contract.
type StreamManagerRefundRevokedIterator struct {
	Event *StreamManagerRefundRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StreamManagerRefundRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StreamManagerRefundRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StreamManagerRefundRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StreamManagerRefundRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StreamManagerRefundRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StreamManagerRefundRevoked represents a RefundRevoked event raised by the StreamManager contract.
type StreamManagerRefundRevoked struct {
	StreamId *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterRefundRevoked is a free log retrieval operation binding the contract event 0xf12d3e50d9ed05d035c02b9f29e1da20004bce112d4fbe2cc0f0ba272ee5d977.
//
// Solidity: event RefundRevoked(uint256 indexed streamId)
func (_StreamManager *StreamManagerFilterer) FilterRefundRevoked(opts *bind.FilterOpts, streamId []*big.Int) (*StreamManagerRefundRevokedIterator, error) {

	var streamIdRule []interface{}
	for _, streamIdItem := range streamId {
		streamIdRule = append(streamIdRule, streamIdItem)
	}

	logs, sub, err := _StreamManager.contract.FilterLogs(opts, "RefundRevoked", streamIdRule)
	if err != nil {
		return nil, err
	}
	return &StreamManagerRefundRevokedIterator{contract: _StreamManager.contract, event: "RefundRevoked", logs: logs, sub: sub}, nil
}

// WatchRefundRevoked is a free log subscription operation binding the contract event 0xf12d3e50d9ed05d035c02b9f29e1da20004bce112d4fbe2cc0f0ba272ee5d977.
//
// Solidity: event RefundRevoked(uint256 indexed streamId)
func (_StreamManager *StreamManagerFilterer) WatchRefundRevoked(opts *bind.WatchOpts, sink chan<- *StreamManagerRefundRevoked, streamId []*big.Int) (event.Subscription, error) {

	var streamIdRule []interface{}
	for _, streamIdItem := range streamId {
		streamIdRule = append(streamIdRule, streamIdItem)
	}

	logs, sub, err := _StreamManager.contract.WatchLogs(opts, "RefundRevoked", streamIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StreamManagerRefundRevoked)
				if err := _StreamManager.contract.UnpackLog(event, "RefundRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRefundRevoked is a log parse operation binding the contract event 0xf12d3e50d9ed05d035c02b9f29e1da20004bce112d4fbe2cc0f0ba272ee5d977.
//
// Solidity: event RefundRevoked(uint256 indexed streamId)
func (_StreamManager *StreamManagerFilterer) ParseRefundRevoked(log types.Log) (*StreamManagerRefundRevoked, error) {
	event := new(StreamManagerRefundRevoked)
	if err := _StreamManager.contract.UnpackLog(event, "RefundRevoked", log); err != nil {
		return nil, err
	}
	return event, nil
}

// StreamManagerStreamApprovedIterator is returned from FilterStreamApproved and is used to iterate over the raw logs and unpacked data for StreamApproved events raised by the StreamManager contract.
type StreamManagerStreamApprovedIterator struct {
	Event *StreamManagerStreamApproved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StreamManagerStreamApprovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StreamManagerStreamApproved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StreamManagerStreamApproved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StreamManagerStreamApprovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StreamManagerStreamApprovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StreamManagerStreamApproved represents a StreamApproved event raised by the StreamManager contract.
type StreamManagerStreamApproved struct {
	StreamId *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterStreamApproved is a free log retrieval operation binding the contract event 0x8fd81831397822207cf7571ac8b61f51ae7de628b05492a586bc63c3fd23bf8c.
//
// Solidity: event StreamApproved(uint256 indexed streamId)
func (_StreamManager *StreamManagerFilterer) FilterStreamApproved(opts *bind.FilterOpts, streamId []*big.Int) (*StreamManagerStreamApprovedIterator, error) {

	var streamIdRule []interface{}
	for _, streamIdItem := range streamId {
		streamIdRule = append(streamIdRule, streamIdItem)
	}

	logs, sub, err := _StreamManager.contract.FilterLogs(opts, "StreamApproved", streamIdRule)
	if err != nil {
		return nil, err
	}
	return &StreamManagerStreamApprovedIterator{contract: _StreamManager.contract, event: "StreamApproved", logs: logs, sub: sub}, nil
}

// WatchStreamApproved is a free log subscription operation binding the contract event 0x8fd81831397822207cf7571ac8b61f51ae7de628b05492a586bc63c3fd23bf8c.
//
// Solidity: event StreamApproved(uint256 indexed streamId)
func (_StreamManager *StreamManagerFilterer) WatchStreamApproved(opts *bind.WatchOpts, sink chan<- *StreamManagerStreamApproved, streamId []*big.Int) (event.Subscription, error) {

	var streamIdRule []interface{}
	for _, streamIdItem := range streamId {
		streamIdRule = append(streamIdRule, streamIdItem)
	}

	logs, sub, err := _StreamManager.contract.WatchLogs(opts, "StreamApproved", streamIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StreamManagerStreamApproved)
				if err := _StreamManager.contract.UnpackLog(event, "StreamApproved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStreamApproved is a log parse operation binding the contract event 0x8fd81831397822207cf7571ac8b61f51ae7de628b05492a586bc63c3fd23bf8c.
//
// Solidity: event StreamApproved(uint256 indexed streamId)
func (_StreamManager *StreamManagerFilterer) ParseStreamApproved(log types.Log) (*StreamManagerStreamApproved, error) {
	event := new(StreamManagerStreamApproved)
	if err := _StreamManager.contract.UnpackLog(event, "StreamApproved", log); err != nil {
		return nil, err
	}
	return event, nil
}

// StreamManagerStreamCreatedIterator is returned from FilterStreamCreated and is used to iterate over the raw logs and unpacked data for StreamCreated events raised by the StreamManager contract.
type StreamManagerStreamCreatedIterator struct {
	Event *StreamManagerStreamCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StreamManagerStreamCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StreamManagerStreamCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StreamManagerStreamCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StreamManagerStreamCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StreamManagerStreamCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StreamManagerStreamCreated represents a StreamCreated event raised by the StreamManager contract.
type StreamManagerStreamCreated struct {
	StreamAddress common.Address
	StreamId      *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterStreamCreated is a free log retrieval operation binding the contract event 0x1bd63527042f119292b792487cee2f3e2f788737aa8ce9c0b5e79a2e17bd6bab.
//
// Solidity: event StreamCreated(address indexed streamAddress, uint256 indexed streamId)
func (_StreamManager *StreamManagerFilterer) FilterStreamCreated(opts *bind.FilterOpts, streamAddress []common.Address, streamId []*big.Int) (*StreamManagerStreamCreatedIterator, error) {

	var streamAddressRule []interface{}
	for _, streamAddressItem := range streamAddress {
		streamAddressRule = append(streamAddressRule, streamAddressItem)
	}
	var streamIdRule []interface{}
	for _, streamIdItem := range streamId {
		streamIdRule = append(streamIdRule, streamIdItem)
	}

	logs, sub, err := _StreamManager.contract.FilterLogs(opts, "StreamCreated", streamAddressRule, streamIdRule)
	if err != nil {
		return nil, err
	}
	return &StreamManagerStreamCreatedIterator{contract: _StreamManager.contract, event: "StreamCreated", logs: logs, sub: sub}, nil
}

// WatchStreamCreated is a free log subscription operation binding the contract event 0x1bd63527042f119292b792487cee2f3e2f788737aa8ce9c0b5e79a2e17bd6bab.
//
// Solidity: event StreamCreated(address indexed streamAddress, uint256 indexed streamId)
func (_StreamManager *StreamManagerFilterer) WatchStreamCreated(opts *bind.WatchOpts, sink chan<- *StreamManagerStreamCreated, streamAddress []common.Address, streamId []*big.Int) (event.Subscription, error) {

	var streamAddressRule []interface{}
	for _, streamAddressItem := range streamAddress {
		streamAddressRule = append(streamAddressRule, streamAddressItem)
	}
	var streamIdRule []interface{}
	for _, streamIdItem := range streamId {
		streamIdRule = append(streamIdRule, streamIdItem)
	}

	logs, sub, err := _StreamManager.contract.WatchLogs(opts, "StreamCreated", streamAddressRule, streamIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StreamManagerStreamCreated)
				if err := _StreamManager.contract.UnpackLog(event, "StreamCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStreamCreated is a log parse operation binding the contract event 0x1bd63527042f119292b792487cee2f3e2f788737aa8ce9c0b5e79a2e17bd6bab.
//
// Solidity: event StreamCreated(address indexed streamAddress, uint256 indexed streamId)
func (_StreamManager *StreamManagerFilterer) ParseStreamCreated(log types.Log) (*StreamManagerStreamCreated, error) {
	event := new(StreamManagerStreamCreated)
	if err := _StreamManager.contract.UnpackLog(event, "StreamCreated", log); err != nil {
		return nil, err
	}
	return event, nil
}

// StreamManagerStreamEndedIterator is returned from FilterStreamEnded and is used to iterate over the raw logs and unpacked data for StreamEnded events raised by the StreamManager contract.
type StreamManagerStreamEndedIterator struct {
	Event *StreamManagerStreamEnded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StreamManagerStreamEndedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StreamManagerStreamEnded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StreamManagerStreamEnded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StreamManagerStreamEndedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StreamManagerStreamEndedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StreamManagerStreamEnded represents a StreamEnded event raised by the StreamManager contract.
type StreamManagerStreamEnded struct {
	StreamId *big.Int
	Caller   common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterStreamEnded is a free log retrieval operation binding the contract event 0xde05e689a2a03aa3267e2f457184c649b080aaa00013ed27d21b85bcb04901ff.
//
// Solidity: event StreamEnded(uint256 indexed streamId, address indexed caller)
func (_StreamManager *StreamManagerFilterer) FilterStreamEnded(opts *bind.FilterOpts, streamId []*big.Int, caller []common.Address) (*StreamManagerStreamEndedIterator, error) {

	var streamIdRule []interface{}
	for _, streamIdItem := range streamId {
		streamIdRule = append(streamIdRule, streamIdItem)
	}
	var callerRule []interface{}
	for _, callerItem := range caller {
		callerRule = append(callerRule, callerItem)
	}

	logs, sub, err := _StreamManager.contract.FilterLogs(opts, "StreamEnded", streamIdRule, callerRule)
	if err != nil {
		return nil, err
	}
	return &StreamManagerStreamEndedIterator{contract: _StreamManager.contract, event: "StreamEnded", logs: logs, sub: sub}, nil
}

// WatchStreamEnded is a free log subscription operation binding the contract event 0xde05e689a2a03aa3267e2f457184c649b080aaa00013ed27d21b85bcb04901ff.
//
// Solidity: event StreamEnded(uint256 indexed streamId, address indexed caller)
func (_StreamManager *StreamManagerFilterer) WatchStreamEnded(opts *bind.WatchOpts, sink chan<- *StreamManagerStreamEnded, streamId []*big.Int, caller []common.Address) (event.Subscription, error) {

	var streamIdRule []interface{}
	for _, streamIdItem := range streamId {
		streamIdRule = append(streamIdRule, streamIdItem)
	}
	var callerRule []interface{}
	for _, callerItem := range caller {
		callerRule = append(callerRule, callerItem)
	}

	logs, sub, err := _StreamManager.contract.WatchLogs(opts, "StreamEnded", streamIdRule, callerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StreamManagerStreamEnded)
				if err := _StreamManager.contract.UnpackLog(event, "StreamEnded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStreamEnded is a log parse operation binding the contract event 0xde05e689a2a03aa3267e2f457184c649b080aaa00013ed27d21b85bcb04901ff.
//
// Solidity: event StreamEnded(uint256 indexed streamId, address indexed caller)
func (_StreamManager *StreamManagerFilterer) ParseStreamEnded(log types.Log) (*StreamManagerStreamEnded, error) {
	event := new(StreamManagerStreamEnded)
	if err := _StreamManager.contract.UnpackLog(event, "StreamEnded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// StreamManagerStreamRequestedIterator is returned from FilterStreamRequested and is used to iterate over the raw logs and unpacked data for StreamRequested events raised by the StreamManager contract.
type StreamManagerStreamRequestedIterator struct {
	Event *StreamManagerStreamRequested // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StreamManagerStreamRequestedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StreamManagerStreamRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StreamManagerStreamRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StreamManagerStreamRequestedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StreamManagerStreamRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StreamManagerStreamRequested represents a StreamRequested event raised by the StreamManager contract.
type StreamManagerStreamRequested struct {
	Client   common.Address
	StreamId *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterStreamRequested is a free log retrieval operation binding the contract event 0xcf93cb8f3f726dd083e429df912bf338cc7f82cc3344b3ab5fa960ef0357e321.
//
// Solidity: event StreamRequested(address indexed client, uint256 indexed streamId)
func (_StreamManager *StreamManagerFilterer) FilterStreamRequested(opts *bind.FilterOpts, client []common.Address, streamId []*big.Int) (*StreamManagerStreamRequestedIterator, error) {

	var clientRule []interface{}
	for _, clientItem := range client {
		clientRule = append(clientRule, clientItem)
	}
	var streamIdRule []interface{}
	for _, streamIdItem := range streamId {
		streamIdRule = append(streamIdRule, streamIdItem)
	}

	logs, sub, err := _StreamManager.contract.FilterLogs(opts, "StreamRequested", clientRule, streamIdRule)
	if err != nil {
		return nil, err
	}
	return &StreamManagerStreamRequestedIterator{contract: _StreamManager.contract, event: "StreamRequested", logs: logs, sub: sub}, nil
}

// WatchStreamRequested is a free log subscription operation binding the contract event 0xcf93cb8f3f726dd083e429df912bf338cc7f82cc3344b3ab5fa960ef0357e321.
//
// Solidity: event StreamRequested(address indexed client, uint256 indexed streamId)
func (_StreamManager *StreamManagerFilterer) WatchStreamRequested(opts *bind.WatchOpts, sink chan<- *StreamManagerStreamRequested, client []common.Address, streamId []*big.Int) (event.Subscription, error) {

	var clientRule []interface{}
	for _, clientItem := range client {
		clientRule = append(clientRule, clientItem)
	}
	var streamIdRule []interface{}
	for _, streamIdItem := range streamId {
		streamIdRule = append(streamIdRule, streamIdItem)
	}

	logs, sub, err := _StreamManager.contract.WatchLogs(opts, "StreamRequested", clientRule, streamIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StreamManagerStreamRequested)
				if err := _StreamManager.contract.UnpackLog(event, "StreamRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStreamRequested is a log parse operation binding the contract event 0xcf93cb8f3f726dd083e429df912bf338cc7f82cc3344b3ab5fa960ef0357e321.
//
// Solidity: event StreamRequested(address indexed client, uint256 indexed streamId)
func (_StreamManager *StreamManagerFilterer) ParseStreamRequested(log types.Log) (*StreamManagerStreamRequested, error) {
	event := new(StreamManagerStreamRequested)
	if err := _StreamManager.contract.UnpackLog(event, "StreamRequested", log); err != nil {
		return nil, err
	}
	return event, nil
}

// StreamManagerValidatorAddedIterator is returned from FilterValidatorAdded and is used to iterate over the raw logs and unpacked data for ValidatorAdded events raised by the StreamManager contract.
type StreamManagerValidatorAddedIterator struct {
	Event *StreamManagerValidatorAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StreamManagerValidatorAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StreamManagerValidatorAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StreamManagerValidatorAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StreamManagerValidatorAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StreamManagerValidatorAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StreamManagerValidatorAdded represents a ValidatorAdded event raised by the StreamManager contract.
type StreamManagerValidatorAdded struct {
	Validator common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorAdded is a free log retrieval operation binding the contract event 0xe366c1c0452ed8eec96861e9e54141ebff23c9ec89fe27b996b45f5ec3884987.
//
// Solidity: event ValidatorAdded(address indexed validator)
func (_StreamManager *StreamManagerFilterer) FilterValidatorAdded(opts *bind.FilterOpts, validator []common.Address) (*StreamManagerValidatorAddedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _StreamManager.contract.FilterLogs(opts, "ValidatorAdded", validatorRule)
	if err != nil {
		return nil, err
	}
	return &StreamManagerValidatorAddedIterator{contract: _StreamManager.contract, event: "ValidatorAdded", logs: logs, sub: sub}, nil
}

// WatchValidatorAdded is a free log subscription operation binding the contract event 0xe366c1c0452ed8eec96861e9e54141ebff23c9ec89fe27b996b45f5ec3884987.
//
// Solidity: event ValidatorAdded(address indexed validator)
func (_StreamManager *StreamManagerFilterer) WatchValidatorAdded(opts *bind.WatchOpts, sink chan<- *StreamManagerValidatorAdded, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _StreamManager.contract.WatchLogs(opts, "ValidatorAdded", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StreamManagerValidatorAdded)
				if err := _StreamManager.contract.UnpackLog(event, "ValidatorAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorAdded is a log parse operation binding the contract event 0xe366c1c0452ed8eec96861e9e54141ebff23c9ec89fe27b996b45f5ec3884987.
//
// Solidity: event ValidatorAdded(address indexed validator)
func (_StreamManager *StreamManagerFilterer) ParseValidatorAdded(log types.Log) (*StreamManagerValidatorAdded, error) {
	event := new(StreamManagerValidatorAdded)
	if err := _StreamManager.contract.UnpackLog(event, "ValidatorAdded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// StreamManagerValidatorRemovedIterator is returned from FilterValidatorRemoved and is used to iterate over the raw logs and unpacked data for ValidatorRemoved events raised by the StreamManager contract.
type StreamManagerValidatorRemovedIterator struct {
	Event *StreamManagerValidatorRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StreamManagerValidatorRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StreamManagerValidatorRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StreamManagerValidatorRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StreamManagerValidatorRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StreamManagerValidatorRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StreamManagerValidatorRemoved represents a ValidatorRemoved event raised by the StreamManager contract.
type StreamManagerValidatorRemoved struct {
	Validator common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidatorRemoved is a free log retrieval operation binding the contract event 0xe1434e25d6611e0db941968fdc97811c982ac1602e951637d206f5fdda9dd8f1.
//
// Solidity: event ValidatorRemoved(address indexed validator)
func (_StreamManager *StreamManagerFilterer) FilterValidatorRemoved(opts *bind.FilterOpts, validator []common.Address) (*StreamManagerValidatorRemovedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _StreamManager.contract.FilterLogs(opts, "ValidatorRemoved", validatorRule)
	if err != nil {
		return nil, err
	}
	return &StreamManagerValidatorRemovedIterator{contract: _StreamManager.contract, event: "ValidatorRemoved", logs: logs, sub: sub}, nil
}

// WatchValidatorRemoved is a free log subscription operation binding the contract event 0xe1434e25d6611e0db941968fdc97811c982ac1602e951637d206f5fdda9dd8f1.
//
// Solidity: event ValidatorRemoved(address indexed validator)
func (_StreamManager *StreamManagerFilterer) WatchValidatorRemoved(opts *bind.WatchOpts, sink chan<- *StreamManagerValidatorRemoved, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _StreamManager.contract.WatchLogs(opts, "ValidatorRemoved", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StreamManagerValidatorRemoved)
				if err := _StreamManager.contract.UnpackLog(event, "ValidatorRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorRemoved is a log parse operation binding the contract event 0xe1434e25d6611e0db941968fdc97811c982ac1602e951637d206f5fdda9dd8f1.
//
// Solidity: event ValidatorRemoved(address indexed validator)
func (_StreamManager *StreamManagerFilterer) ParseValidatorRemoved(log types.Log) (*StreamManagerValidatorRemoved, error) {
	event := new(StreamManagerValidatorRemoved)
	if err := _StreamManager.contract.UnpackLog(event, "ValidatorRemoved", log); err != nil {
		return nil, err
	}
	return event, nil
}
